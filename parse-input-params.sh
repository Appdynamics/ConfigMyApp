#!/bin/bash
 #
 #
 # ARG_OPTIONAL_SINGLE([controller-host],[c],[controller host (without trailing bakslash)])
 # ARG_OPTIONAL_SINGLE([controller-port],[P],[controller port])
 # ARG_OPTIONAL_SINGLE([username],[u],[AppDynamics user username])
 # ARG_OPTIONAL_SINGLE([password],[p],[AppDynamics user password])
 # ARG_OPTIONAL_SINGLE([proxy-url],[],[proxy url])
 # ARG_OPTIONAL_SINGLE([proxy-port],[],[proxy port])
 # ARG_HELP([The general script's help msg])
 # ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='cPuph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_controller_host=
_arg_controller_port=8090
_arg_username=
_arg_password=
_arg_proxy_url=
_arg_proxy_port=


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-c|--controller-host <arg>] [-P|--controller-port <arg>] [-u|--username <arg>] [-p|--password <arg>] [--proxy-url <arg>] [--proxy-port <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-c, --controller-host: controller host (without trailing bakslash) (no default)"
	printf '\t%s\n' "-P, --controller-port: controller port ("$_arg_controller_port")"
	printf '\t%s\n' "-u, --username: AppDynamics user username (no default)"
	printf '\t%s\n' "-p, --password: AppDynamics user password (no default)"
	printf '\t%s\n' "--proxy-url: proxy url (no default)"
	printf '\t%s\n' "--proxy-port: proxy port (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--controller-host)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_controller_host="$2"
				shift
				;;
			--controller-host=*)
				_arg_controller_host="${_key##--controller-host=}"
				;;
			-c*)
				_arg_controller_host="${_key##-c}"
				;;
			-P|--controller-port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_controller_port="$2"
				shift
				;;
			--controller-port=*)
				_arg_controller_port="${_key##--controller-port=}"
				;;
			-P*)
				_arg_controller_port="${_key##-P}"
				;;
			-u|--username)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_username="$2"
				shift
				;;
			--username=*)
				_arg_username="${_key##--username=}"
				;;
			-u*)
				_arg_username="${_key##-u}"
				;;
			-p|--password)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_password="$2"
				shift
				;;
			--password=*)
				_arg_password="${_key##--password=}"
				;;
			-p*)
				_arg_password="${_key##-p}"
				;;
			--proxy-url)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_proxy_url="$2"
				shift
				;;
			--proxy-url=*)
				_arg_proxy_url="${_key##--proxy-url=}"
				;;
			--proxy-port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_proxy_port="$2"
				shift
				;;
			--proxy-port=*)
				_arg_proxy_port="${_key##--proxy-port=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# 2. If value not set with arguments replace with Environment Variable (if exists)
if [[ -z "${_arg_controller_host// }" ]]; then
	if [[ ! -z "${CMA_CONTROLLER_HOST// }" ]]; then
		_arg_controller_host=${CMA_CONTROLLER_HOST}
	fi
fi

if [[ -z "${_arg_controller_port// }" ]]; then
	if [[ ! -z "${CMA_CONTROLLER_PORT// }" ]]; then
		_arg_controller_port=${CMA_CONTROLLER_PORT}
	fi
fi

if [[ -z "${_arg_username// }" ]]; then
	if [[ ! -z "${CMA_USERNAME// }" ]]; then
		_arg_username=${CMA_USERNAME}
	fi
fi

if [[ -z "${_arg_password// }" ]]; then
	if [[ ! -z "${CMA_PASSWORD// }" ]]; then
		_arg_password=${CMA_PASSWORD}
	fi
fi

# 3. If value not set replace with configuration file values
conf_file="config.json"

if [[ -z "${_arg_controller_host// }" ]]; then
	_arg_controller_host=$(jq -r ' .non_prod_controller_details[].url' <${conf_file})
fi

# not implemented yet
#if [[ -z "${_arg_controller_port// }" ]]; then
#fi

if [[ -z "${_arg_username// }" ]]; then
	_arg_username=$(jq -r ' .non_prod_controller_details[].username' <${conf_file})
fi

if [[ -z "${_arg_password// }" ]]; then
	_arg_password=$(jq -r ' .non_prod_controller_details[].password' <${conf_file})
fi

if [[ -z "${_arg_proxy_url// }" ]]; then
	_arg_proxy_url=$(jq -r ' .non_prod_controller_details[].proxy_ur'l <${conf_file})
fi

if [[ -z "${_arg_proxy_port// }" ]]; then
	_arg_proxy_port=$(jq -r ' .non_prod_controller_details[].proxy_port' <${conf_file})
fi

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

 #  <-- needed because of Argbash

echo "Value of --controller-host: $_arg_controller_host"
echo "Value of --controller-port: $_arg_controller_port"
echo "Value of --username: $_arg_username" 
echo "Value of --password: $_arg_password" 
echo "Value of --proxy-url: $_arg_proxy_url"
echo "Value of --proxy-port: $_arg_proxy_port"

 #  <-- needed because of Argbash
# ] <-- needed because of Argbash